// This class is auto-generated by the DAL Generator utility
#region Namespace Imports
using System;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Runtime.Serialization;
using System.Collections.Generic;
using System.Data;
using System.Data.SqlClient;
using Atlas.WS.Common;
using Atlas.WS.Common.Constants;
using Atlas.Shared.SharedObjects.CustomAttributes;
using Atlas.WS.BusinessObjects.DataAccess;
using Atlas.Shared.Helpers;
using Atlas.Shared.SharedObjects;
using Atlas.Shared.Validators;
using Atlas.Shared.ExtensionMethods;
#endregion

namespace Sample02_XMLDSL_And_CodeCompletion
{

	public partial class OrderProcessingRequest
	{

		#region Auto-generated class properties

		protected Guid m_OrderGroupID;
		public Guid OrderGroupID
		{
			get { return m_OrderGroupID; }
			set { m_OrderGroupID = value; }
		}


		protected Guid m_SoldToID;
		public Guid SoldToID
		{
			get { return m_SoldToID; }
			set { m_SoldToID = value; }
		}


		protected int m_ProcessingRequestStatusID;
		public int ProcessingRequestStatusID
		{
			get { return m_ProcessingRequestStatusID; }
			set { m_ProcessingRequestStatusID = value; }
		}


		protected DateTime m_DateSubmitted;
		public DateTime DateSubmitted
		{
			get { return m_DateSubmitted; }
			set { m_DateSubmitted = value; }
		}


		protected int m_StatusID;
		public int StatusID
		{
			get { return m_StatusID; }
			set { m_StatusID = value; }
		}


		protected string m_PrinterID;
		public string PrinterID
		{
			get { return m_PrinterID; }
			set { m_PrinterID = value; }
		}


		protected long m_NewProp;
		[AtlasRequired]
		public long NewProp
		{
			get { return m_NewProp; }
			set { m_NewProp = value; }
		}


		#endregion Auto-generated class properties

		#region Auto-generated class methods

		#region Auto-generated class Constructors

		public OrderProcessingRequest() {}

		public OrderProcessingRequest(OrderProcessingRequest data)
		{
			this.OrderGroupID = data.OrderGroupID;
			this.SoldToID = data.SoldToID;
			this.ProcessingRequestStatusID = data.ProcessingRequestStatusID;
			this.DateSubmitted = data.DateSubmitted;
			this.StatusID = data.StatusID;
			this.PrinterID = data.PrinterID;
			this.NewProp = data.NewProp;
		}

		#endregion Auto-generated class Constructors

		#region Auto-generated class Selectors

		public static IEnumerable<OrderProcessingRequest> GetOrdersToPrint(string PrintClusterID)
		{
			var principal = System.Threading.Thread.CurrentPrincipal as Microsoft.IdentityModel.Claims.ClaimsPrincipal;
			var result = new List<OrderProcessingRequest>();
			var parameters = new List<SqlParameter>
				{
					ParamsHelper.CreateInputParameter("@PrintClusterID", SqlDbType.NVarChar, PrintClusterID),
				};
			using (var reader = BaseRepository.ExecuteReaderEx("ACPTransactions.DataAccess.ConnectionString",
				"OMS.usp_GetOrdersToPrint", parameters))
			{
				while (reader.Read())
				{
					result.Add(new OrderProcessingRequest()
						{
							OrderGroupID = reader.GetGuid("OrderGroupID"),
							SoldToID = reader.GetGuid("SoldToId"),
							ProcessingRequestStatusID = reader.GetInt32("ProcessingRequestStatusID"),
							DateSubmitted = reader.GetDateTime("DateSubmitted"),
							StatusID = reader.GetInt32("ProcessingRequestStatusID"),
							PrinterID = reader.GetString("PrinterID"),
							NewProp = reader.GetInt64("NewProp"),
						});
				}
			}
			return result;
		}

		#endregion Auto-generated class Selectors

		#region Auto-generated class Updaters

		public static void SetOrdersPrinting(IEnumerable<GuidListType> ChitOrderGroupIDs, IEnumerable<GuidListType> ReceiptOrderGroupIDs, IEnumerable<int?> PrintTaskIDs)
		{
			var principal = System.Threading.Thread.CurrentPrincipal as Microsoft.IdentityModel.Claims.ClaimsPrincipal;
			var ChitOrderGroupIDsTable = new DataTable("Table");
			var ChitOrderGroupIDsTableColumns = ChitOrderGroupIDsTable.Columns;
			ChitOrderGroupIDsTableColumns.Add("Id", typeof(Guid));
			if (ChitOrderGroupIDs != null)
			{
				foreach (var entity in ChitOrderGroupIDs)
				{
					var row = ChitOrderGroupIDsTable.NewRow();
					row["Id"] = entity.Id;
					ChitOrderGroupIDsTable.Rows.Add(row);
				}
			}
			var ReceiptOrderGroupIDsTable = new DataTable("Table");
			var ReceiptOrderGroupIDsTableColumns = ReceiptOrderGroupIDsTable.Columns;
			ReceiptOrderGroupIDsTableColumns.Add("Id", typeof(Guid));
			if (ReceiptOrderGroupIDs != null)
			{
				foreach (var entity in ReceiptOrderGroupIDs)
				{
					var row = ReceiptOrderGroupIDsTable.NewRow();
					row["Id"] = entity.Id;
					ReceiptOrderGroupIDsTable.Rows.Add(row);
				}
			}
			var PrintTaskIDsTable = new DataTable("Table");
			var PrintTaskIDsTableColumns = PrintTaskIDsTable.Columns;
			PrintTaskIDsTableColumns.Add("Value", typeof(int));
			if (PrintTaskIDs != null)
			{
				foreach (var entity in PrintTaskIDs)
				{
					var row = PrintTaskIDsTable.NewRow();
					row["Value"] = entity.Value;
					PrintTaskIDsTable.Rows.Add(row);
				}
			}
			var parameters = new List<SqlParameter>
				{
					ParamsHelper.CreateInputParameter("@ChitOrderGroupIDs", SqlDbType.Structured, ChitOrderGroupIDsTable),
					ParamsHelper.CreateInputParameter("@ReceiptOrderGroupIDs", SqlDbType.Structured, ReceiptOrderGroupIDsTable),
					ParamsHelper.CreateInputParameter("@PrintTaskIDs", SqlDbType.Structured, PrintTaskIDsTable),
				};
			BaseRepository.ExecuteCommand("ACPTransactions.DataAccess.ConnectionString", "OMS.usp_SetOrdersPrinting", parameters);
		}

		public static void SetOrdersPrintResults(IEnumerable<OrderPrintTaskResult> PrintTaskResults)
		{
			var principal = System.Threading.Thread.CurrentPrincipal as Microsoft.IdentityModel.Claims.ClaimsPrincipal;
			var PrintTaskResultsTable = new DataTable("Table");
			var PrintTaskResultsTableColumns = PrintTaskResultsTable.Columns;
			PrintTaskResultsTableColumns.Add("IsSuccess", typeof(bool));
			PrintTaskResultsTableColumns.Add("PrintErrorCode", typeof(string));
			PrintTaskResultsTableColumns.Add("PrinterID", typeof(string));
			PrintTaskResultsTableColumns.Add("PrintJobID", typeof(int));
			PrintTaskResultsTableColumns.Add("PrinterStatus", typeof(int));
			if (PrintTaskResults != null)
			{
				foreach (var entity in PrintTaskResults)
				{
					var row = PrintTaskResultsTable.NewRow();
					row["IsSuccess"] = entity.IsSuccess;
					row["PrintErrorCode"] = entity.PrintErrorCode;
					row["PrinterID"] = entity.PrinterID;
					row["PrintJobID"] = entity.PrintJobID;
					row["PrinterStatus"] = entity.PrinterStatus;
					PrintTaskResultsTable.Rows.Add(row);
				}
			}
			var parameters = new List<SqlParameter>
				{
					ParamsHelper.CreateInputParameter("@OrderPrintTaskResults", SqlDbType.Structured, PrintTaskResultsTable),
				};
			BaseRepository.ExecuteCommand("ACPTransactions.DataAccess.ConnectionString", "OMS.usp_SetOrdersPrintResults", parameters);
		}

		#endregion Auto-generated class Updaters

		#endregion Auto-generated class methods
	}
}
